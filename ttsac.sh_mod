#! /bin/sh
# Shell script to build SAC macro to execute that will label a plot with
# travel time information.  Parameters:
#   1 - event depth
#   2 - event distance (degrees)
#   3 - O value from SAC file header
#   4 - start time for plot (seconds relative to file zero)
#   5 - end time for plot (seconds relative to file zero)
#   6 - Event ID string
#   7 - Phase id (or "none")
#   8 - Time window around phase (seconds)
#   9 - Event magnitude

file=/tmp/ttsac.pcf
ttfile=/tmp/ttimes.in

depth="$1"
dist="$2"
otime="$3"
info=`echo $6 | awk -F_ '{printf("Event:%s  _Sta:%s  _Dist:%.2f  \
_Az:%.1f  _Baz:%.1f  _%.3fN  _%.3fE  %.1fkm _Mag:%.1f\n",$1,$2,$3,$4,$5,$6,$7,$8,$9)}'`

echo $info

# First compute travel times for all phases

/Volumes/External/Data/Q_Codes/ttimes/ttimes << EOF > $ttfile
all

$depth
$dist
-
EOF
seism_start=$4
seism_end=$5
seism_origin_diff=$3
cat /dev/null > $file
echo '[qsf3hlvbss]'           >> $file
echo 't 0.14 0.94'            >> $file
echo $info                    >> $file
echo '[f3stvb]'               >> $file
echo 't 0.15 0.08'            >> $file
echo 'IASPEI 91 tables'       >> $file
echo '[f3stvb]'               >> $file
echo $seism_start $seism_end $seism_origin_diff "$7" $8 | cat - $ttfile | awk '
#	This awkscript maps the start and end times (sec_beg and sec_end) in 
#	seconds on the seismogram to plotting device units. Because the travel 
#	times are in seconds relative to the origin time, it also must know 
#	the difference (sec_diff) between the origin time and the start time 
#	of the seismogram.
#	The magic device settings (mach_[x,y][max,min]) are for the SAC 
#	devices "sun" and "sgf".
#	Methodology is to run through the ttimes output and save all phase
#	names and arrival times.  Then those that sit within the time window
#	are output.  Comments are placed in the .pcf file for all phases for
#	error checking purposes.
BEGIN { mach_xmin = 0.1; mach_xmax = 0.9; mach_ymin = 0.1; mach_ymax = 0.87
        mach_offset = 0.024
	np = 0 }
NR == 1 { sec_beg=0.0+$1; sec_end=0.0+$2; sec_diff=0.0+$3
	  phase_match=$4; time_window=0.0+$5
	  phase_min_time=864000.0; phase_max_time=0.0; n_matched = 0
#	  If phase name has no branch suffix, let it match any branch.
	  if (phase_match !~ /^.*((ab)|(bc)|(df)|(ac)|[gnb])$/)
	     phase_match = phase_match "((ab)|(bc)|(df)|(ac)|[gnb])?$"
}
($0 ~ /.*\..*\..*\..*\..*\./) || (NR == 1) {
   if (NR==1) {
      phase="Origin"; tt=0.0
      printf("* Matching %s\n",phase_match)
   } else
      if (NF==9) {phase=$3 ; tt=0.0+$4} else {phase=$2 ; tt=0.0+$3}
   np += 1; pid[np] = phase; ptt[np] = tt; ph[phase] += 1
   if ( phase ~ phase_match ) {
      printf("* Matched %s\n",phase)
      n_matched += 1
      if (ph[phase] <= 1) {
#        For phases such as SKKS that arrive along both the major and minor
#           arcs, exclude the second arrival from the window around the phase.
	 if (tt < phase_min_time) phase_min_time = tt
	 if (tt > phase_max_time) phase_max_time = tt
      }
   }
}
END {

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#	If defining a window around some phase arrival, set that bracket.
#	Otherwise use the explicit bounds given.  Run through the collected
#	phases and emit only those that are within the time bounds.
   if ( phase_match != "none") {
      if (n_matched > 0) {
	 sec_beg = phase_min_time - time_window + sec_diff;
	 sec_end = phase_max_time + time_window + sec_diff;
      }
      printf "xlim %.0f %.0f\n",sec_beg,sec_end > "/tmp/ttsac.xlim" 
   }
   for (n=1; n<=np; n++) {
      printf("* %s %f\n",pid[n],ptt[n])
      mach_time = mach_xmin + ( (mach_xmax - mach_xmin) * ( (ptt[n] + sec_diff - sec_beg) / (sec_end - sec_beg) ) )
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#	Check to see how close two arrivals may be -- if they are closer than 
#       0.02 units units in the x direction, then the label will be "offset" 
#       by 0.02 units in the y direction.
      if ( (mach_time - prev_mach_time) < 0.02) 
	 offset = prev_offset + mach_offset
      else 
	 offset = 0.0
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#	Check to see that the arrival is in the window covered by the seismogram
#	-- if not, then do not include in the overlay.
      if ( (mach_time <= mach_xmax) && (mach_time >= mach_xmin) )
	 printf("t %.3f %.3f\n%s\no %.3f %.3f\n[l2]\nl %.3f %.3f\n[l1]\n",
	 mach_time,(mach_ymax+offset),pid[n],mach_time,(mach_ymax+offset),mach_time,(mach_ymin+0.05))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      prev_mach_time=mach_time
      if (offset >= 0.04) prev_offset = -0.02; else prev_offset = offset
   }
   print  "Q"
}
' >> $file
echo 'Q' >> $file
#/bin/rm -f $ttfile
exit
